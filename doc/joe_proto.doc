#### joe_proto - joe example protocol

joe_proto - joe example protocol

Please add @discuss section in ../src/joe_proto.c.

This is the class interface:

```h
    //  This is a stable class, and may not change except for emergencies. It
    //  is provided in stable builds.
    #define JOE_PROTO_HELLO 1                   // 
    #define JOE_PROTO_CHUNK 2                   // 
    #define JOE_PROTO_CLOSE 3                   // 
    #define JOE_PROTO_READY 4                   // 
    #define JOE_PROTO_ERROR 5                   // 
    
    //  Create a new empty joe_proto
    JOE_EXPORT joe_proto_t *
        joe_proto_new (void);
    
    //  Destroy a joe_proto instance
    JOE_EXPORT void
        joe_proto_destroy (joe_proto_t **self_p);
    
    //  Receive a joe_proto from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting. 
    JOE_EXPORT int
        joe_proto_recv (joe_proto_t *self, zsock_t *input);
    
    //  Send the joe_proto to the output socket, does not destroy it
    JOE_EXPORT int
        joe_proto_send (joe_proto_t *self, zsock_t *output);
    
    //  Print contents of message to stdout
    JOE_EXPORT void
        joe_proto_print (joe_proto_t *self);
    
    //  Get the message routing id, as a frame
    JOE_EXPORT zframe_t *
        joe_proto_routing_id (joe_proto_t *self);
    
    //  Set the message routing id from a frame
    JOE_EXPORT void
        joe_proto_set_routing_id (joe_proto_t *self, zframe_t *routing_id);
    
    //  Get the joe_proto message id
    JOE_EXPORT int
        joe_proto_id (joe_proto_t *self);
    
    //  Set the joe_proto message id
    JOE_EXPORT void
        joe_proto_set_id (joe_proto_t *self, int id);
    
    //  Get the joe_proto message id as printable text
    JOE_EXPORT const char *
        joe_proto_command (joe_proto_t *self);
    
    //  Get the filename field
    JOE_EXPORT const char *
        joe_proto_filename (joe_proto_t *self);
    
    //  Set the filename field
    JOE_EXPORT void
        joe_proto_set_filename (joe_proto_t *self, const char *filename);
    
    //  Get a copy of the aux field
    JOE_EXPORT zhash_t *
        joe_proto_aux (joe_proto_t *self);
    
    //  Get the aux field and transfer ownership to caller
    JOE_EXPORT zhash_t *
        joe_proto_get_aux (joe_proto_t *self);
    
    //  
    JOE_EXPORT void
        joe_proto_set_aux (joe_proto_t *self, zhash_t **aux_p);
    
    //  Get the offset field
    JOE_EXPORT uint64_t
        joe_proto_offset (joe_proto_t *self);
    
    //  Set the offset field
    JOE_EXPORT void
        joe_proto_set_offset (joe_proto_t *self, uint64_t offset);
    
    //  Get the size field
    JOE_EXPORT uint64_t
        joe_proto_size (joe_proto_t *self);
    
    //  Set the size field
    JOE_EXPORT void
        joe_proto_set_size (joe_proto_t *self, uint64_t size);
    
    //  Get the checksum field
    JOE_EXPORT uint64_t
        joe_proto_checksum (joe_proto_t *self);
    
    //  Set the checksum field
    JOE_EXPORT void
        joe_proto_set_checksum (joe_proto_t *self, uint64_t checksum);
    
    //  Get a copy of the data field
    JOE_EXPORT zchunk_t *
        joe_proto_data (joe_proto_t *self);
    
    //  Get the data field and transfer ownership to caller
    JOE_EXPORT zchunk_t *
        joe_proto_get_data (joe_proto_t *self);
    
    //  
    JOE_EXPORT void
        joe_proto_set_data (joe_proto_t *self, zchunk_t **data_p);
    
    //  Get the reason field
    JOE_EXPORT const char *
        joe_proto_reason (joe_proto_t *self);
    
    //  Set the reason field
    JOE_EXPORT void
        joe_proto_set_reason (joe_proto_t *self, const char *reason);
    
    //  Self test of this class.
    JOE_EXPORT void
        joe_proto_test (bool verbose);
    
```

This is the class self test code:

```c
    //  Simple create/destroy test
    joe_proto_t *self = joe_proto_new ();
    assert (self);
    joe_proto_destroy (&self);
    //  Create pair of sockets we can send through
    //  We must bind before connect if we wish to remain compatible with ZeroMQ < v4
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    int rc = zsock_bind (output, "inproc://selftest-joe_proto");
    assert (rc == 0);
    
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    rc = zsock_connect (input, "inproc://selftest-joe_proto");
    assert (rc == 0);
    
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = joe_proto_new ();
    joe_proto_set_id (self, JOE_PROTO_HELLO);
    
    joe_proto_set_filename (self, "Life is short but Now lasts for ever");
    zhash_t *hello_aux = zhash_new ();
    zhash_insert (hello_aux, "Name", "Brutus");
    joe_proto_set_aux (self, &hello_aux);
    //  Send twice
    joe_proto_send (self, output);
    joe_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        joe_proto_recv (self, input);
        assert (joe_proto_routing_id (self));
        assert (streq (joe_proto_filename (self), "Life is short but Now lasts for ever"));
        zhash_t *aux = joe_proto_get_aux (self);
        assert (zhash_size (aux) == 2);
        assert (streq ((char *) zhash_first (aux), "Brutus"));
        assert (streq ((char *) zhash_cursor (aux), "Name"));
        zhash_destroy (&aux);
        if (instance == 1)
            zhash_destroy (&hello_aux);
    }
    joe_proto_set_id (self, JOE_PROTO_CHUNK);
    
    joe_proto_set_filename (self, "Life is short but Now lasts for ever");
    joe_proto_set_offset (self, 123);
    joe_proto_set_size (self, 123);
    joe_proto_set_checksum (self, 123);
    zchunk_t *chunk_data = zchunk_new ("Captcha Diem", 12);
    joe_proto_set_data (self, &chunk_data);
    //  Send twice
    joe_proto_send (self, output);
    joe_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        joe_proto_recv (self, input);
        assert (joe_proto_routing_id (self));
        assert (streq (joe_proto_filename (self), "Life is short but Now lasts for ever"));
        assert (joe_proto_offset (self) == 123);
        assert (joe_proto_size (self) == 123);
        assert (joe_proto_checksum (self) == 123);
        assert (memcmp (zchunk_data (joe_proto_data (self)), "Captcha Diem", 12) == 0);
        if (instance == 1)
            zchunk_destroy (&chunk_data);
    }
    joe_proto_set_id (self, JOE_PROTO_CLOSE);
    
    joe_proto_set_filename (self, "Life is short but Now lasts for ever");
    joe_proto_set_size (self, 123);
    //  Send twice
    joe_proto_send (self, output);
    joe_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        joe_proto_recv (self, input);
        assert (joe_proto_routing_id (self));
        assert (streq (joe_proto_filename (self), "Life is short but Now lasts for ever"));
        assert (joe_proto_size (self) == 123);
    }
    joe_proto_set_id (self, JOE_PROTO_READY);
    
    //  Send twice
    joe_proto_send (self, output);
    joe_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        joe_proto_recv (self, input);
        assert (joe_proto_routing_id (self));
    }
    joe_proto_set_id (self, JOE_PROTO_ERROR);
    
    joe_proto_set_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    joe_proto_send (self, output);
    joe_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        joe_proto_recv (self, input);
        assert (joe_proto_routing_id (self));
        assert (streq (joe_proto_reason (self), "Life is short but Now lasts for ever"));
    }
    
    joe_proto_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);
```

